/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_TCP_TEST_H
#define _MOCK_TCP_TEST_H

#include "unity.h"
#include "TCP_test.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_TCP_test_Init(void);
void mock_TCP_test_Destroy(void);
void mock_TCP_test_Verify(void);




#define init_sockaddr_storage_IgnoreAndReturn(cmock_retval) init_sockaddr_storage_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void init_sockaddr_storage_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, tcp_task_err_t cmock_to_return);
#define init_sockaddr_storage_StopIgnore() init_sockaddr_storage_CMockStopIgnore()
void init_sockaddr_storage_CMockStopIgnore(void);
#define init_sockaddr_storage_ExpectAndReturn(socket_info, cmock_retval) init_sockaddr_storage_CMockExpectAndReturn(__LINE__, socket_info, cmock_retval)
void init_sockaddr_storage_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, socket_information_t* socket_info, tcp_task_err_t cmock_to_return);
typedef tcp_task_err_t (* CMOCK_init_sockaddr_storage_CALLBACK)(socket_information_t* socket_info, int cmock_num_calls);
void init_sockaddr_storage_AddCallback(CMOCK_init_sockaddr_storage_CALLBACK Callback);
void init_sockaddr_storage_Stub(CMOCK_init_sockaddr_storage_CALLBACK Callback);
#define init_sockaddr_storage_StubWithCallback init_sockaddr_storage_Stub
#define create_bind_socket_IgnoreAndReturn(cmock_retval) create_bind_socket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void create_bind_socket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, tcp_task_err_t cmock_to_return);
#define create_bind_socket_StopIgnore() create_bind_socket_CMockStopIgnore()
void create_bind_socket_CMockStopIgnore(void);
#define create_bind_socket_ExpectAndReturn(socket_info, cmock_retval) create_bind_socket_CMockExpectAndReturn(__LINE__, socket_info, cmock_retval)
void create_bind_socket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, socket_information_t* socket_info, tcp_task_err_t cmock_to_return);
typedef tcp_task_err_t (* CMOCK_create_bind_socket_CALLBACK)(socket_information_t* socket_info, int cmock_num_calls);
void create_bind_socket_AddCallback(CMOCK_create_bind_socket_CALLBACK Callback);
void create_bind_socket_Stub(CMOCK_create_bind_socket_CALLBACK Callback);
#define create_bind_socket_StubWithCallback create_bind_socket_Stub
#define manage_socket_IgnoreAndReturn(cmock_retval) manage_socket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void manage_socket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, tcp_task_err_t cmock_to_return);
#define manage_socket_StopIgnore() manage_socket_CMockStopIgnore()
void manage_socket_CMockStopIgnore(void);
#define manage_socket_ExpectAndReturn(socket_info, cmock_retval) manage_socket_CMockExpectAndReturn(__LINE__, socket_info, cmock_retval)
void manage_socket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, socket_information_t* socket_info, tcp_task_err_t cmock_to_return);
typedef tcp_task_err_t (* CMOCK_manage_socket_CALLBACK)(socket_information_t* socket_info, int cmock_num_calls);
void manage_socket_AddCallback(CMOCK_manage_socket_CALLBACK Callback);
void manage_socket_Stub(CMOCK_manage_socket_CALLBACK Callback);
#define manage_socket_StubWithCallback manage_socket_Stub
#define shutdown_socket_IgnoreAndReturn(cmock_retval) shutdown_socket_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void shutdown_socket_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, tcp_task_err_t cmock_to_return);
#define shutdown_socket_StopIgnore() shutdown_socket_CMockStopIgnore()
void shutdown_socket_CMockStopIgnore(void);
#define shutdown_socket_ExpectAndReturn(socket_info, cmock_retval) shutdown_socket_CMockExpectAndReturn(__LINE__, socket_info, cmock_retval)
void shutdown_socket_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, socket_information_t* socket_info, tcp_task_err_t cmock_to_return);
typedef tcp_task_err_t (* CMOCK_shutdown_socket_CALLBACK)(socket_information_t* socket_info, int cmock_num_calls);
void shutdown_socket_AddCallback(CMOCK_shutdown_socket_CALLBACK Callback);
void shutdown_socket_Stub(CMOCK_shutdown_socket_CALLBACK Callback);
#define shutdown_socket_StubWithCallback shutdown_socket_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
